{"version":3,"file":"is.min.js","sources":["../src/core.mjs","../src/static/array.mjs","../src/static/object.mjs","../src/static/representation.mjs","../src/static/type.mjs","../src/static/typeOf.mjs","../node_modules/json5/dist/index.mjs","../src/proto/array.mjs","../src/proto/boolean.mjs","../src/proto/function.mjs","../src/proto/in.mjs","../src/proto/nan.mjs","../src/proto/null.mjs","../src/proto/number.mjs","../src/proto/object.mjs","../src/proto/oftype.mjs","../src/proto/regexp.mjs","../src/proto/representation.mjs","../src/proto/string.mjs","../src/proto/symbol.mjs","../src/proto/undefined.mjs"],"sourcesContent":["/**\n * `is.js`\n *\n * @constructor\n * @param {*} actual - something to check\n * @returns {is} is instance\n * @version 1.0.0\n */\nfunction is(actual) {\n  if (!(this instanceof is)) {\n    return new is(actual);\n  }\n\n  /**\n   * The `actual` property is the parameter passed to `is`\n   *\n   * @memberof is\n   * @instance\n   * @since 1.0.0\n   */\n  this.actual = actual;\n\n  /**\n   * The `not` property has the negated version of `is.prototype`\n   *\n   * @example\n   * const x = '';\n   * is(x).string()                   // true\n   * is(x).not.string()               // false\n   * is(x).not.string({empty: false}) // true\n   *\n   * @type {Omit<is, 'not' | 'actual'>}\n   * @memberof is\n   * @instance\n   * @since 1.0.0\n   */\n  this.not = {};\n\n  for (const func of Object.getOwnPropertyNames(\n    Object.getPrototypeOf(this)\n  ).filter(i => i != 'constructor')) {\n    this.not[func] = (object, options) => !this[func](object, options);\n  }\n}\n\n/**\n * @callback ExtendCallBack\n * @param {*} [options] - Optional options parameter\n * @param {*} [config] - Optional config parameter\n * @returns {boolean}\n */\n\n/**\n * @typedef {Object.<string, ExtendCallBack>} PluginFunctionMap\n */\n\n/**\n * Extend `is.prototype`\n *\n * @param { PluginFunctionMap } object - plugins object\n *\n * @example\n * is.extend({\n *   uppercase: function () {\n *     return this.actual.split('').every(x => x.match(/[A-Z]/));\n *   }\n * });\n *\n * is('WORD').uppercase()     // true\n * is('Word').uppercase()     // false\n * is('Word').not.uppercase() // true\n *\n * @memberof is\n * @static\n * @since 1.0.0\n */\nis.extend = function (object) {\n  for (const method in object) {\n    if (Object.prototype.hasOwnProperty.call(object, method)) {\n      is.prototype[method] = object[method];\n    }\n  }\n};\n\nexport default is;\n","import is from '../core.mjs';\n\n/**\n * Validates with type predicate if `object` is array\n *\n * @param {*} object - The object to check\n * @returns {object is any[]}\n *\n * @example\n * const x: unknown = ...;\n *\n * if (is.array(x)) {\n *   // x here is any[]\n * }\n *\n * @memberof is\n * @static\n * @since 1.0.0\n */\nis.array = function (object) {\n  return Array.isArray\n    ? Array.isArray(object)\n    : is.representation(object, '[object Array]');\n};\n\nexport default is;\n","import is from '../core.mjs';\n\n/**\n * Validates if `object` is a plain object\n *\n * @param {*} object - The object to check\n * @returns {boolean}\n *\n * @example\n * is.object({ a: 1 })        // true\n * is.object(new Something()) // false`\n *\n * @memberOf is\n * @static\n * @since 1.0.0\n */\nis.object = function (object) {\n  return (\n    typeof object === 'object' &&\n    object !== null &&\n    is.representation(object, '[object Object]')\n  );\n};\n\nexport default is;\n","import is from '../core.mjs';\n\n/**\n * @typedef { (\"[object Type]\") } Representation\n */\n\n/**\n * Get the string representation of `object`\n * and optionaly compare it against `expected`\n *\n * @overload Get\n * @param {*} object - The object to check\n * @returns {Representation}\n * @example\n * is.representation(null) // '[object Null]'\n *\n * @overload Compare\n * @param {*} object - The object to check\n * @param {Representation} expected - e.g `\"[object Boolean]\"`\n * @returns {boolean}\n * @example\n * is.representation(true, '[object Boolean]') // true\n *\n * @memberOf is\n * @static\n * @since 1.0.0\n */\nis.representation = function (object, expected) {\n  const toString = Object.prototype.toString.call(object);\n\n  return typeof expected !== 'undefined' ? toString === expected : toString;\n};\n\nexport default is;\n","import is from '../core.mjs';\n\n/**\n * @typedef {(\n * 'string'\n * | 'number'\n * | 'boolean'\n * | 'array'\n * | 'object'\n * | 'function'\n * | 'symbol'\n * | 'null'\n * | 'undefined'\n * | 'regexp'\n * )} Specific\n */\n\n/**\n * @typedef {{\n * string: string;\n * number: number;\n * boolean: boolean;\n * array: any[];\n * object: object;\n * function: Function;\n * symbol: Symbol;\n * null: null;\n * undefined: undefined;\n * regexp: RegExp;\n * }} SpecificMap\n */\n\n/**\n * **How it works?**\n * > If only `object` parameter is provided, return it's specific type\n *\n * ```\n * is.type([] | \"[]\");      // 'array'\n * is.type({} | \"{}\");      // 'object'\n * is.type(1 | \"2\");        // 'number'\n * is.type(true | \"false\"); // 'boolean'\n * is.type(\"something\");    // 'string'\n * is.type(/[0-9]/g);       // 'regexp'\n * ```\n *\n * > If `object` and `expected` are provides, returns boolean with a type predicate\n *\n * ```\n * const arg = process.argv[2];\n *\n * if ( is.type(arg, 'array') ) {\n *   // true and arg is any[]\n * }\n *\n * if ( is.type(arg, 'symbol') ) {\n *   // true and arg is symbol\n * }\n * ```\n *\n * > But wait, actually ( \"{}\", \"[]\", \"2\" ) are strings\n *\n * ```\n * const arg = '{a: 1}'; // 'string'\n *\n * // If `object` is of type 'string'\n * // with `expected` set to 'string'\n * // returns true, regardless it's content\n * is.type(arg, 'string') // true, with 'string' type predicate\n *\n * // via `is.prototype.str`\n * is(arg).string() // true, but no type predicate\n * ```\n *\n * **What the specific type is**\n * > For cli inputs and types wrapped in a string, try to extract and define it's type\n *\n * @template {Specific} Expected\n *\n * @overload Get\n * @param {*} object - The object whose type is to be checked\n * @returns {Specific | 'unknown'}\n *\n * @overload Compare with type predicate\n * @param {*} object - The object whose type to be checked\n * @param {Specific} expected - The `object` expected type\n * @returns {object is SpecificMap[Expected]}\n *\n * @memberOf is\n * @static\n * @since 1.0.0\n */\nis.type = function (object, expected) {\n  if (typeof expected === 'string') {\n    if (expected === 'string' && typeof object === 'string') {\n      return true;\n    }\n\n    return extract(object) === expected;\n  }\n\n  return extract(object);\n\n  function extract(object) {\n    const type = is(object);\n\n    if (type.number({ string: true })) {\n      return 'number';\n    } else if (type.boolean({ string: true })) {\n      return 'boolean';\n    } else if (type.array({ string: true })) {\n      return 'array';\n    } else if (type.object({ string: true })) {\n      return 'object';\n    } else if (type.function()) {\n      return 'function';\n    } else if (type.symbol()) {\n      return 'symbol';\n    } else if (type.regexp()) {\n      return 'regexp';\n    } else if (type.null({ string: true })) {\n      return 'null';\n    } else if (type.undefined({ string: true })) {\n      return 'undefined';\n    } else if (type.string()) {\n      return 'string';\n    } else {\n      return 'unknown';\n    }\n  }\n};\n\nexport default is;\n","import is from '../core.mjs';\n\n/**\n * @typedef {(\n * 'bigint'\n * | 'boolean'\n * | 'function'\n * | 'number'\n * | 'object'\n * | 'string'\n * | 'symbol'\n * | 'undefined'\n * )} Typeof\n */\n\n/**\n * @typedef {{\n * bigint: bigint;\n * boolean: boolean;\n * function: Function;\n * number: number;\n * object: object;\n * string: string;\n * symbol: symbol;\n * undefined: undefined;\n * }} TypeofMap\n */\n\n/**\n * Check with type predicate if `object` is typeof `expected`\n *\n * @template {Typeof} Expected\n *\n * @param {*} object - The object whose type to be checked\n * @param {Expected} expected - The `object` expected type\n * @returns {object is TypeofMap[Expected]}\n *\n * @example\n * is.typeOf(['a'], 'object')  // true\n * is.typeOf({a: 0}, 'object') // true\n * is.typeOf(null, 'object')   // true\n * is.typeOf('xyz', 'string')  // true\n * is.typeOf(0, 'number')      // true\n * is.typeOf(false, 'boolean') // true\n *\n * @memberOf is\n * @static\n * @since 1.0.0\n */\nis.typeOf = function (object, expected) {\n  return typeof object === expected;\n};\n\nexport default is;\n","// This is a generated file. Do not edit.\nvar Space_Separator = /[\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/;\nvar ID_Start = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/;\nvar ID_Continue = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09FC\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D00-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1CD0-\\u1CD2\\u1CD4-\\u1CF9\\u1D00-\\u1DF9\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDE00-\\uDE3E\\uDE47\\uDE50-\\uDE83\\uDE86-\\uDE99\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4A\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/;\n\nvar unicode = {\n\tSpace_Separator: Space_Separator,\n\tID_Start: ID_Start,\n\tID_Continue: ID_Continue\n};\n\nvar util = {\n    isSpaceSeparator (c) {\n        return typeof c === 'string' && unicode.Space_Separator.test(c)\n    },\n\n    isIdStartChar (c) {\n        return typeof c === 'string' && (\n            (c >= 'a' && c <= 'z') ||\n        (c >= 'A' && c <= 'Z') ||\n        (c === '$') || (c === '_') ||\n        unicode.ID_Start.test(c)\n        )\n    },\n\n    isIdContinueChar (c) {\n        return typeof c === 'string' && (\n            (c >= 'a' && c <= 'z') ||\n        (c >= 'A' && c <= 'Z') ||\n        (c >= '0' && c <= '9') ||\n        (c === '$') || (c === '_') ||\n        (c === '\\u200C') || (c === '\\u200D') ||\n        unicode.ID_Continue.test(c)\n        )\n    },\n\n    isDigit (c) {\n        return typeof c === 'string' && /[0-9]/.test(c)\n    },\n\n    isHexDigit (c) {\n        return typeof c === 'string' && /[0-9A-Fa-f]/.test(c)\n    },\n};\n\nlet source;\nlet parseState;\nlet stack;\nlet pos;\nlet line;\nlet column;\nlet token;\nlet key;\nlet root;\n\nvar parse = function parse (text, reviver) {\n    source = String(text);\n    parseState = 'start';\n    stack = [];\n    pos = 0;\n    line = 1;\n    column = 0;\n    token = undefined;\n    key = undefined;\n    root = undefined;\n\n    do {\n        token = lex();\n\n        // This code is unreachable.\n        // if (!parseStates[parseState]) {\n        //     throw invalidParseState()\n        // }\n\n        parseStates[parseState]();\n    } while (token.type !== 'eof')\n\n    if (typeof reviver === 'function') {\n        return internalize({'': root}, '', reviver)\n    }\n\n    return root\n};\n\nfunction internalize (holder, name, reviver) {\n    const value = holder[name];\n    if (value != null && typeof value === 'object') {\n        if (Array.isArray(value)) {\n            for (let i = 0; i < value.length; i++) {\n                const key = String(i);\n                const replacement = internalize(value, key, reviver);\n                if (replacement === undefined) {\n                    delete value[key];\n                } else {\n                    Object.defineProperty(value, key, {\n                        value: replacement,\n                        writable: true,\n                        enumerable: true,\n                        configurable: true,\n                    });\n                }\n            }\n        } else {\n            for (const key in value) {\n                const replacement = internalize(value, key, reviver);\n                if (replacement === undefined) {\n                    delete value[key];\n                } else {\n                    Object.defineProperty(value, key, {\n                        value: replacement,\n                        writable: true,\n                        enumerable: true,\n                        configurable: true,\n                    });\n                }\n            }\n        }\n    }\n\n    return reviver.call(holder, name, value)\n}\n\nlet lexState;\nlet buffer;\nlet doubleQuote;\nlet sign;\nlet c;\n\nfunction lex () {\n    lexState = 'default';\n    buffer = '';\n    doubleQuote = false;\n    sign = 1;\n\n    for (;;) {\n        c = peek();\n\n        // This code is unreachable.\n        // if (!lexStates[lexState]) {\n        //     throw invalidLexState(lexState)\n        // }\n\n        const token = lexStates[lexState]();\n        if (token) {\n            return token\n        }\n    }\n}\n\nfunction peek () {\n    if (source[pos]) {\n        return String.fromCodePoint(source.codePointAt(pos))\n    }\n}\n\nfunction read () {\n    const c = peek();\n\n    if (c === '\\n') {\n        line++;\n        column = 0;\n    } else if (c) {\n        column += c.length;\n    } else {\n        column++;\n    }\n\n    if (c) {\n        pos += c.length;\n    }\n\n    return c\n}\n\nconst lexStates = {\n    default () {\n        switch (c) {\n        case '\\t':\n        case '\\v':\n        case '\\f':\n        case ' ':\n        case '\\u00A0':\n        case '\\uFEFF':\n        case '\\n':\n        case '\\r':\n        case '\\u2028':\n        case '\\u2029':\n            read();\n            return\n\n        case '/':\n            read();\n            lexState = 'comment';\n            return\n\n        case undefined:\n            read();\n            return newToken('eof')\n        }\n\n        if (util.isSpaceSeparator(c)) {\n            read();\n            return\n        }\n\n        // This code is unreachable.\n        // if (!lexStates[parseState]) {\n        //     throw invalidLexState(parseState)\n        // }\n\n        return lexStates[parseState]()\n    },\n\n    comment () {\n        switch (c) {\n        case '*':\n            read();\n            lexState = 'multiLineComment';\n            return\n\n        case '/':\n            read();\n            lexState = 'singleLineComment';\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    multiLineComment () {\n        switch (c) {\n        case '*':\n            read();\n            lexState = 'multiLineCommentAsterisk';\n            return\n\n        case undefined:\n            throw invalidChar(read())\n        }\n\n        read();\n    },\n\n    multiLineCommentAsterisk () {\n        switch (c) {\n        case '*':\n            read();\n            return\n\n        case '/':\n            read();\n            lexState = 'default';\n            return\n\n        case undefined:\n            throw invalidChar(read())\n        }\n\n        read();\n        lexState = 'multiLineComment';\n    },\n\n    singleLineComment () {\n        switch (c) {\n        case '\\n':\n        case '\\r':\n        case '\\u2028':\n        case '\\u2029':\n            read();\n            lexState = 'default';\n            return\n\n        case undefined:\n            read();\n            return newToken('eof')\n        }\n\n        read();\n    },\n\n    value () {\n        switch (c) {\n        case '{':\n        case '[':\n            return newToken('punctuator', read())\n\n        case 'n':\n            read();\n            literal('ull');\n            return newToken('null', null)\n\n        case 't':\n            read();\n            literal('rue');\n            return newToken('boolean', true)\n\n        case 'f':\n            read();\n            literal('alse');\n            return newToken('boolean', false)\n\n        case '-':\n        case '+':\n            if (read() === '-') {\n                sign = -1;\n            }\n\n            lexState = 'sign';\n            return\n\n        case '.':\n            buffer = read();\n            lexState = 'decimalPointLeading';\n            return\n\n        case '0':\n            buffer = read();\n            lexState = 'zero';\n            return\n\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            buffer = read();\n            lexState = 'decimalInteger';\n            return\n\n        case 'I':\n            read();\n            literal('nfinity');\n            return newToken('numeric', Infinity)\n\n        case 'N':\n            read();\n            literal('aN');\n            return newToken('numeric', NaN)\n\n        case '\"':\n        case \"'\":\n            doubleQuote = (read() === '\"');\n            buffer = '';\n            lexState = 'string';\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    identifierNameStartEscape () {\n        if (c !== 'u') {\n            throw invalidChar(read())\n        }\n\n        read();\n        const u = unicodeEscape();\n        switch (u) {\n        case '$':\n        case '_':\n            break\n\n        default:\n            if (!util.isIdStartChar(u)) {\n                throw invalidIdentifier()\n            }\n\n            break\n        }\n\n        buffer += u;\n        lexState = 'identifierName';\n    },\n\n    identifierName () {\n        switch (c) {\n        case '$':\n        case '_':\n        case '\\u200C':\n        case '\\u200D':\n            buffer += read();\n            return\n\n        case '\\\\':\n            read();\n            lexState = 'identifierNameEscape';\n            return\n        }\n\n        if (util.isIdContinueChar(c)) {\n            buffer += read();\n            return\n        }\n\n        return newToken('identifier', buffer)\n    },\n\n    identifierNameEscape () {\n        if (c !== 'u') {\n            throw invalidChar(read())\n        }\n\n        read();\n        const u = unicodeEscape();\n        switch (u) {\n        case '$':\n        case '_':\n        case '\\u200C':\n        case '\\u200D':\n            break\n\n        default:\n            if (!util.isIdContinueChar(u)) {\n                throw invalidIdentifier()\n            }\n\n            break\n        }\n\n        buffer += u;\n        lexState = 'identifierName';\n    },\n\n    sign () {\n        switch (c) {\n        case '.':\n            buffer = read();\n            lexState = 'decimalPointLeading';\n            return\n\n        case '0':\n            buffer = read();\n            lexState = 'zero';\n            return\n\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            buffer = read();\n            lexState = 'decimalInteger';\n            return\n\n        case 'I':\n            read();\n            literal('nfinity');\n            return newToken('numeric', sign * Infinity)\n\n        case 'N':\n            read();\n            literal('aN');\n            return newToken('numeric', NaN)\n        }\n\n        throw invalidChar(read())\n    },\n\n    zero () {\n        switch (c) {\n        case '.':\n            buffer += read();\n            lexState = 'decimalPoint';\n            return\n\n        case 'e':\n        case 'E':\n            buffer += read();\n            lexState = 'decimalExponent';\n            return\n\n        case 'x':\n        case 'X':\n            buffer += read();\n            lexState = 'hexadecimal';\n            return\n        }\n\n        return newToken('numeric', sign * 0)\n    },\n\n    decimalInteger () {\n        switch (c) {\n        case '.':\n            buffer += read();\n            lexState = 'decimalPoint';\n            return\n\n        case 'e':\n        case 'E':\n            buffer += read();\n            lexState = 'decimalExponent';\n            return\n        }\n\n        if (util.isDigit(c)) {\n            buffer += read();\n            return\n        }\n\n        return newToken('numeric', sign * Number(buffer))\n    },\n\n    decimalPointLeading () {\n        if (util.isDigit(c)) {\n            buffer += read();\n            lexState = 'decimalFraction';\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    decimalPoint () {\n        switch (c) {\n        case 'e':\n        case 'E':\n            buffer += read();\n            lexState = 'decimalExponent';\n            return\n        }\n\n        if (util.isDigit(c)) {\n            buffer += read();\n            lexState = 'decimalFraction';\n            return\n        }\n\n        return newToken('numeric', sign * Number(buffer))\n    },\n\n    decimalFraction () {\n        switch (c) {\n        case 'e':\n        case 'E':\n            buffer += read();\n            lexState = 'decimalExponent';\n            return\n        }\n\n        if (util.isDigit(c)) {\n            buffer += read();\n            return\n        }\n\n        return newToken('numeric', sign * Number(buffer))\n    },\n\n    decimalExponent () {\n        switch (c) {\n        case '+':\n        case '-':\n            buffer += read();\n            lexState = 'decimalExponentSign';\n            return\n        }\n\n        if (util.isDigit(c)) {\n            buffer += read();\n            lexState = 'decimalExponentInteger';\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    decimalExponentSign () {\n        if (util.isDigit(c)) {\n            buffer += read();\n            lexState = 'decimalExponentInteger';\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    decimalExponentInteger () {\n        if (util.isDigit(c)) {\n            buffer += read();\n            return\n        }\n\n        return newToken('numeric', sign * Number(buffer))\n    },\n\n    hexadecimal () {\n        if (util.isHexDigit(c)) {\n            buffer += read();\n            lexState = 'hexadecimalInteger';\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    hexadecimalInteger () {\n        if (util.isHexDigit(c)) {\n            buffer += read();\n            return\n        }\n\n        return newToken('numeric', sign * Number(buffer))\n    },\n\n    string () {\n        switch (c) {\n        case '\\\\':\n            read();\n            buffer += escape();\n            return\n\n        case '\"':\n            if (doubleQuote) {\n                read();\n                return newToken('string', buffer)\n            }\n\n            buffer += read();\n            return\n\n        case \"'\":\n            if (!doubleQuote) {\n                read();\n                return newToken('string', buffer)\n            }\n\n            buffer += read();\n            return\n\n        case '\\n':\n        case '\\r':\n            throw invalidChar(read())\n\n        case '\\u2028':\n        case '\\u2029':\n            separatorChar(c);\n            break\n\n        case undefined:\n            throw invalidChar(read())\n        }\n\n        buffer += read();\n    },\n\n    start () {\n        switch (c) {\n        case '{':\n        case '[':\n            return newToken('punctuator', read())\n\n        // This code is unreachable since the default lexState handles eof.\n        // case undefined:\n        //     return newToken('eof')\n        }\n\n        lexState = 'value';\n    },\n\n    beforePropertyName () {\n        switch (c) {\n        case '$':\n        case '_':\n            buffer = read();\n            lexState = 'identifierName';\n            return\n\n        case '\\\\':\n            read();\n            lexState = 'identifierNameStartEscape';\n            return\n\n        case '}':\n            return newToken('punctuator', read())\n\n        case '\"':\n        case \"'\":\n            doubleQuote = (read() === '\"');\n            lexState = 'string';\n            return\n        }\n\n        if (util.isIdStartChar(c)) {\n            buffer += read();\n            lexState = 'identifierName';\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    afterPropertyName () {\n        if (c === ':') {\n            return newToken('punctuator', read())\n        }\n\n        throw invalidChar(read())\n    },\n\n    beforePropertyValue () {\n        lexState = 'value';\n    },\n\n    afterPropertyValue () {\n        switch (c) {\n        case ',':\n        case '}':\n            return newToken('punctuator', read())\n        }\n\n        throw invalidChar(read())\n    },\n\n    beforeArrayValue () {\n        if (c === ']') {\n            return newToken('punctuator', read())\n        }\n\n        lexState = 'value';\n    },\n\n    afterArrayValue () {\n        switch (c) {\n        case ',':\n        case ']':\n            return newToken('punctuator', read())\n        }\n\n        throw invalidChar(read())\n    },\n\n    end () {\n        // This code is unreachable since it's handled by the default lexState.\n        // if (c === undefined) {\n        //     read()\n        //     return newToken('eof')\n        // }\n\n        throw invalidChar(read())\n    },\n};\n\nfunction newToken (type, value) {\n    return {\n        type,\n        value,\n        line,\n        column,\n    }\n}\n\nfunction literal (s) {\n    for (const c of s) {\n        const p = peek();\n\n        if (p !== c) {\n            throw invalidChar(read())\n        }\n\n        read();\n    }\n}\n\nfunction escape () {\n    const c = peek();\n    switch (c) {\n    case 'b':\n        read();\n        return '\\b'\n\n    case 'f':\n        read();\n        return '\\f'\n\n    case 'n':\n        read();\n        return '\\n'\n\n    case 'r':\n        read();\n        return '\\r'\n\n    case 't':\n        read();\n        return '\\t'\n\n    case 'v':\n        read();\n        return '\\v'\n\n    case '0':\n        read();\n        if (util.isDigit(peek())) {\n            throw invalidChar(read())\n        }\n\n        return '\\0'\n\n    case 'x':\n        read();\n        return hexEscape()\n\n    case 'u':\n        read();\n        return unicodeEscape()\n\n    case '\\n':\n    case '\\u2028':\n    case '\\u2029':\n        read();\n        return ''\n\n    case '\\r':\n        read();\n        if (peek() === '\\n') {\n            read();\n        }\n\n        return ''\n\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n        throw invalidChar(read())\n\n    case undefined:\n        throw invalidChar(read())\n    }\n\n    return read()\n}\n\nfunction hexEscape () {\n    let buffer = '';\n    let c = peek();\n\n    if (!util.isHexDigit(c)) {\n        throw invalidChar(read())\n    }\n\n    buffer += read();\n\n    c = peek();\n    if (!util.isHexDigit(c)) {\n        throw invalidChar(read())\n    }\n\n    buffer += read();\n\n    return String.fromCodePoint(parseInt(buffer, 16))\n}\n\nfunction unicodeEscape () {\n    let buffer = '';\n    let count = 4;\n\n    while (count-- > 0) {\n        const c = peek();\n        if (!util.isHexDigit(c)) {\n            throw invalidChar(read())\n        }\n\n        buffer += read();\n    }\n\n    return String.fromCodePoint(parseInt(buffer, 16))\n}\n\nconst parseStates = {\n    start () {\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        push();\n    },\n\n    beforePropertyName () {\n        switch (token.type) {\n        case 'identifier':\n        case 'string':\n            key = token.value;\n            parseState = 'afterPropertyName';\n            return\n\n        case 'punctuator':\n            // This code is unreachable since it's handled by the lexState.\n            // if (token.value !== '}') {\n            //     throw invalidToken()\n            // }\n\n            pop();\n            return\n\n        case 'eof':\n            throw invalidEOF()\n        }\n\n        // This code is unreachable since it's handled by the lexState.\n        // throw invalidToken()\n    },\n\n    afterPropertyName () {\n        // This code is unreachable since it's handled by the lexState.\n        // if (token.type !== 'punctuator' || token.value !== ':') {\n        //     throw invalidToken()\n        // }\n\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        parseState = 'beforePropertyValue';\n    },\n\n    beforePropertyValue () {\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        push();\n    },\n\n    beforeArrayValue () {\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        if (token.type === 'punctuator' && token.value === ']') {\n            pop();\n            return\n        }\n\n        push();\n    },\n\n    afterPropertyValue () {\n        // This code is unreachable since it's handled by the lexState.\n        // if (token.type !== 'punctuator') {\n        //     throw invalidToken()\n        // }\n\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        switch (token.value) {\n        case ',':\n            parseState = 'beforePropertyName';\n            return\n\n        case '}':\n            pop();\n        }\n\n        // This code is unreachable since it's handled by the lexState.\n        // throw invalidToken()\n    },\n\n    afterArrayValue () {\n        // This code is unreachable since it's handled by the lexState.\n        // if (token.type !== 'punctuator') {\n        //     throw invalidToken()\n        // }\n\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        switch (token.value) {\n        case ',':\n            parseState = 'beforeArrayValue';\n            return\n\n        case ']':\n            pop();\n        }\n\n        // This code is unreachable since it's handled by the lexState.\n        // throw invalidToken()\n    },\n\n    end () {\n        // This code is unreachable since it's handled by the lexState.\n        // if (token.type !== 'eof') {\n        //     throw invalidToken()\n        // }\n    },\n};\n\nfunction push () {\n    let value;\n\n    switch (token.type) {\n    case 'punctuator':\n        switch (token.value) {\n        case '{':\n            value = {};\n            break\n\n        case '[':\n            value = [];\n            break\n        }\n\n        break\n\n    case 'null':\n    case 'boolean':\n    case 'numeric':\n    case 'string':\n        value = token.value;\n        break\n\n    // This code is unreachable.\n    // default:\n    //     throw invalidToken()\n    }\n\n    if (root === undefined) {\n        root = value;\n    } else {\n        const parent = stack[stack.length - 1];\n        if (Array.isArray(parent)) {\n            parent.push(value);\n        } else {\n            Object.defineProperty(parent, key, {\n                value,\n                writable: true,\n                enumerable: true,\n                configurable: true,\n            });\n        }\n    }\n\n    if (value !== null && typeof value === 'object') {\n        stack.push(value);\n\n        if (Array.isArray(value)) {\n            parseState = 'beforeArrayValue';\n        } else {\n            parseState = 'beforePropertyName';\n        }\n    } else {\n        const current = stack[stack.length - 1];\n        if (current == null) {\n            parseState = 'end';\n        } else if (Array.isArray(current)) {\n            parseState = 'afterArrayValue';\n        } else {\n            parseState = 'afterPropertyValue';\n        }\n    }\n}\n\nfunction pop () {\n    stack.pop();\n\n    const current = stack[stack.length - 1];\n    if (current == null) {\n        parseState = 'end';\n    } else if (Array.isArray(current)) {\n        parseState = 'afterArrayValue';\n    } else {\n        parseState = 'afterPropertyValue';\n    }\n}\n\n// This code is unreachable.\n// function invalidParseState () {\n//     return new Error(`JSON5: invalid parse state '${parseState}'`)\n// }\n\n// This code is unreachable.\n// function invalidLexState (state) {\n//     return new Error(`JSON5: invalid lex state '${state}'`)\n// }\n\nfunction invalidChar (c) {\n    if (c === undefined) {\n        return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)\n    }\n\n    return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)\n}\n\nfunction invalidEOF () {\n    return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)\n}\n\n// This code is unreachable.\n// function invalidToken () {\n//     if (token.type === 'eof') {\n//         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)\n//     }\n\n//     const c = String.fromCodePoint(token.value.codePointAt(0))\n//     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)\n// }\n\nfunction invalidIdentifier () {\n    column -= 5;\n    return syntaxError(`JSON5: invalid identifier character at ${line}:${column}`)\n}\n\nfunction separatorChar (c) {\n    console.warn(`JSON5: '${formatChar(c)}' in strings is not valid ECMAScript; consider escaping`);\n}\n\nfunction formatChar (c) {\n    const replacements = {\n        \"'\": \"\\\\'\",\n        '\"': '\\\\\"',\n        '\\\\': '\\\\\\\\',\n        '\\b': '\\\\b',\n        '\\f': '\\\\f',\n        '\\n': '\\\\n',\n        '\\r': '\\\\r',\n        '\\t': '\\\\t',\n        '\\v': '\\\\v',\n        '\\0': '\\\\0',\n        '\\u2028': '\\\\u2028',\n        '\\u2029': '\\\\u2029',\n    };\n\n    if (replacements[c]) {\n        return replacements[c]\n    }\n\n    if (c < ' ') {\n        const hexString = c.charCodeAt(0).toString(16);\n        return '\\\\x' + ('00' + hexString).substring(hexString.length)\n    }\n\n    return c\n}\n\nfunction syntaxError (message) {\n    const err = new SyntaxError(message);\n    err.lineNumber = line;\n    err.columnNumber = column;\n    return err\n}\n\nvar stringify = function stringify (value, replacer, space) {\n    const stack = [];\n    let indent = '';\n    let propertyList;\n    let replacerFunc;\n    let gap = '';\n    let quote;\n\n    if (\n        replacer != null &&\n        typeof replacer === 'object' &&\n        !Array.isArray(replacer)\n    ) {\n        space = replacer.space;\n        quote = replacer.quote;\n        replacer = replacer.replacer;\n    }\n\n    if (typeof replacer === 'function') {\n        replacerFunc = replacer;\n    } else if (Array.isArray(replacer)) {\n        propertyList = [];\n        for (const v of replacer) {\n            let item;\n\n            if (typeof v === 'string') {\n                item = v;\n            } else if (\n                typeof v === 'number' ||\n                v instanceof String ||\n                v instanceof Number\n            ) {\n                item = String(v);\n            }\n\n            if (item !== undefined && propertyList.indexOf(item) < 0) {\n                propertyList.push(item);\n            }\n        }\n    }\n\n    if (space instanceof Number) {\n        space = Number(space);\n    } else if (space instanceof String) {\n        space = String(space);\n    }\n\n    if (typeof space === 'number') {\n        if (space > 0) {\n            space = Math.min(10, Math.floor(space));\n            gap = '          '.substr(0, space);\n        }\n    } else if (typeof space === 'string') {\n        gap = space.substr(0, 10);\n    }\n\n    return serializeProperty('', {'': value})\n\n    function serializeProperty (key, holder) {\n        let value = holder[key];\n        if (value != null) {\n            if (typeof value.toJSON5 === 'function') {\n                value = value.toJSON5(key);\n            } else if (typeof value.toJSON === 'function') {\n                value = value.toJSON(key);\n            }\n        }\n\n        if (replacerFunc) {\n            value = replacerFunc.call(holder, key, value);\n        }\n\n        if (value instanceof Number) {\n            value = Number(value);\n        } else if (value instanceof String) {\n            value = String(value);\n        } else if (value instanceof Boolean) {\n            value = value.valueOf();\n        }\n\n        switch (value) {\n        case null: return 'null'\n        case true: return 'true'\n        case false: return 'false'\n        }\n\n        if (typeof value === 'string') {\n            return quoteString(value, false)\n        }\n\n        if (typeof value === 'number') {\n            return String(value)\n        }\n\n        if (typeof value === 'object') {\n            return Array.isArray(value) ? serializeArray(value) : serializeObject(value)\n        }\n\n        return undefined\n    }\n\n    function quoteString (value) {\n        const quotes = {\n            \"'\": 0.1,\n            '\"': 0.2,\n        };\n\n        const replacements = {\n            \"'\": \"\\\\'\",\n            '\"': '\\\\\"',\n            '\\\\': '\\\\\\\\',\n            '\\b': '\\\\b',\n            '\\f': '\\\\f',\n            '\\n': '\\\\n',\n            '\\r': '\\\\r',\n            '\\t': '\\\\t',\n            '\\v': '\\\\v',\n            '\\0': '\\\\0',\n            '\\u2028': '\\\\u2028',\n            '\\u2029': '\\\\u2029',\n        };\n\n        let product = '';\n\n        for (let i = 0; i < value.length; i++) {\n            const c = value[i];\n            switch (c) {\n            case \"'\":\n            case '\"':\n                quotes[c]++;\n                product += c;\n                continue\n\n            case '\\0':\n                if (util.isDigit(value[i + 1])) {\n                    product += '\\\\x00';\n                    continue\n                }\n            }\n\n            if (replacements[c]) {\n                product += replacements[c];\n                continue\n            }\n\n            if (c < ' ') {\n                let hexString = c.charCodeAt(0).toString(16);\n                product += '\\\\x' + ('00' + hexString).substring(hexString.length);\n                continue\n            }\n\n            product += c;\n        }\n\n        const quoteChar = quote || Object.keys(quotes).reduce((a, b) => (quotes[a] < quotes[b]) ? a : b);\n\n        product = product.replace(new RegExp(quoteChar, 'g'), replacements[quoteChar]);\n\n        return quoteChar + product + quoteChar\n    }\n\n    function serializeObject (value) {\n        if (stack.indexOf(value) >= 0) {\n            throw TypeError('Converting circular structure to JSON5')\n        }\n\n        stack.push(value);\n\n        let stepback = indent;\n        indent = indent + gap;\n\n        let keys = propertyList || Object.keys(value);\n        let partial = [];\n        for (const key of keys) {\n            const propertyString = serializeProperty(key, value);\n            if (propertyString !== undefined) {\n                let member = serializeKey(key) + ':';\n                if (gap !== '') {\n                    member += ' ';\n                }\n                member += propertyString;\n                partial.push(member);\n            }\n        }\n\n        let final;\n        if (partial.length === 0) {\n            final = '{}';\n        } else {\n            let properties;\n            if (gap === '') {\n                properties = partial.join(',');\n                final = '{' + properties + '}';\n            } else {\n                let separator = ',\\n' + indent;\n                properties = partial.join(separator);\n                final = '{\\n' + indent + properties + ',\\n' + stepback + '}';\n            }\n        }\n\n        stack.pop();\n        indent = stepback;\n        return final\n    }\n\n    function serializeKey (key) {\n        if (key.length === 0) {\n            return quoteString(key, true)\n        }\n\n        const firstChar = String.fromCodePoint(key.codePointAt(0));\n        if (!util.isIdStartChar(firstChar)) {\n            return quoteString(key, true)\n        }\n\n        for (let i = firstChar.length; i < key.length; i++) {\n            if (!util.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))) {\n                return quoteString(key, true)\n            }\n        }\n\n        return key\n    }\n\n    function serializeArray (value) {\n        if (stack.indexOf(value) >= 0) {\n            throw TypeError('Converting circular structure to JSON5')\n        }\n\n        stack.push(value);\n\n        let stepback = indent;\n        indent = indent + gap;\n\n        let partial = [];\n        for (let i = 0; i < value.length; i++) {\n            const propertyString = serializeProperty(String(i), value);\n            partial.push((propertyString !== undefined) ? propertyString : 'null');\n        }\n\n        let final;\n        if (partial.length === 0) {\n            final = '[]';\n        } else {\n            if (gap === '') {\n                let properties = partial.join(',');\n                final = '[' + properties + ']';\n            } else {\n                let separator = ',\\n' + indent;\n                let properties = partial.join(separator);\n                final = '[\\n' + indent + properties + ',\\n' + stepback + ']';\n            }\n        }\n\n        stack.pop();\n        indent = stepback;\n        return final\n    }\n};\n\nconst JSON5 = {\n    parse,\n    stringify,\n};\n\nvar lib = JSON5;\n\nexport default lib;\n","import is from '../core.mjs';\nimport json5 from 'json5';\n\n/**\n * Checks if `is.prototype.actual` is array,\n * with optional behavior for string array\n *\n * @param {object} [options] - Optional configration object\n * @param {boolean} [options.string] - If true, also considers\n * the string array `\"[...]\"` as valid array matches\n * @returns {boolean}\n *\n * @example\n * is(['A']).array() // true\n * is('[1]').array({string: true}) // true\n *\n * @memberof is\n * @instance\n * @since 1.0.0\n */\nis.prototype.array = function (options) {\n  try {\n    const parsed =\n      options?.string === true && this.string()\n        ? json5.parse(this.actual)\n        : this.actual;\n\n    return is.array(parsed);\n  } catch {\n    return false;\n  }\n};\n\nexport default is;\n","import is from '../core.mjs';\n\n/**\n * Checks if `is.prototype.actual` is boolean (true | false)\n * with optional behavior for string boolean\n *\n * @param {Object} [options] - Optional configration object\n * @param {boolean} [options.string] - If true, also considers\n * the strings 'true' and 'false' as valid boolean matches\n * @returns {boolean}\n *\n * @example\n * is(true).boolean() // true\n * is('false').boolean({string: true}) // true\n *\n * @memberof is\n * @instance\n * @since 1.0.0\n */\nis.prototype.boolean = function (options) {\n  const range = [true, false];\n\n  if (options?.string === true) {\n    range.push('true', 'false');\n  }\n\n  return range.some(i => i === this.actual);\n};\n\nexport default is;\n","import is from '../core.mjs';\n\n/**\n * Checks if `is.prototype.actual` is function\n *\n * @returns {boolean}\n *\n * @example\n * is(() => {}).function() // true\n *\n * @memberof is\n * @instance\n * @since 1.0.0\n */\nis.prototype.function = function () {\n  return (\n    typeof this.actual === 'function' &&\n    this.representation('[object Function]')\n  );\n};\n\nexport default is;\n","import is from '../core.mjs';\n\n/**\n * Determines if `is.prototype.actual` in `object` or `array`,\n * with optional strict check for ownProperties\n *\n * @param {*} object - Object to search in\n * @param {object} [options] - Optional configration object\n * @param {'all' | 'own'} [options.mode] - If 'own' check only the object direct properties\n * (ownProperties) not inherited, defaults to 'all'\n * @returns {boolean}\n *\n * @example\n * const a = {one: 1};\n * const b = Object.create(a);\n * b.tow = 2;\n *\n * is('a').in([1, 'a', true]) // true\n * is('one').in(b) // true\n * is('tow').in(b) // true\n * is('one').in(b, {mode: 'own'}) // false\n * is('tow').in(b, {mode: 'own'}) // true\n *\n * @memberof is\n * @instance\n * @since 1.0.0\n */\nis.prototype.in = function (object, options = { mode: 'all' }) {\n  if (is.array(object)) {\n    return object.includes(this.actual);\n  } else if (is.object(object)) {\n    if (options.mode === 'own') {\n      return Object.prototype.hasOwnProperty.call(object, this.actual);\n    }\n    return this.actual in object;\n  } else {\n    return false;\n  }\n};\n\nexport default is;\n","import is from '../core.mjs';\n\n/**\n * Checks if `is.prototype.actual` is NaN, by default coerces the input to a number first\n * with optional behavior for skips coercion (exact NaN check)\n *\n * @param {object} [options] - Optional configration object\n * @param {boolean} [options.strict] - If true, check `is.prototype.actual` is exactly `NaN`\n * without coerces to a number before checking\n * @returns {boolean}\n *\n * @example\n * is('a').nan() // true\n * is(NaN).nan({strict: true}) // true\n * is('a').nan({strict: true}) // false\n *\n * @memberof is\n * @instance\n * @since 1.0.0\n */\nis.prototype.nan = function (options) {\n  return options?.strict === true\n    ? Number.isNaN(this.actual)\n    : isNaN(this.actual);\n};\n\nexport default is;\n","import is from '../core.mjs';\n\n/**\n * Checks if `is.prototype.actual` is null,\n * with optional behavior for string null\n *\n * @param {object} [options] - Optional configration object\n * @param {boolean} [options.string] - If true, also considers the string null \"null\"\n * as valid null matches\n *\n * @returns {boolean}\n *\n * @example\n * is(null).null() // true\n * is('null').null({string: true}) // true\n *\n * @memberof is\n * @instance\n * @since 1.0.0\n */\nis.prototype.null = function (options) {\n  const native = () => typeof this.actual === 'object' && this.actual === null;\n  const string = () => this.string({ empty: false }) && this.actual === 'null';\n  return options?.string === true ? native() || string() : native();\n}\n\nexport default is;\n","import is from '../core.mjs';\n\n/**\n * Checks if `is.prototype.actual` is number,\n * with optional behavior for string number\n *\n * @param {object} [options] - Optional configuration object\n * @param {boolean} [options.string] - If true considers string values that can be\n * converted to a number as valid otherwise checks for number type\n *\n * @returns {boolean}\n *\n * @example\n * is(1).number() // true\n * is('2').number({string: true}) // true\n *\n * @memberof is\n * @instance\n * @since 1.0.0\n */\nis.prototype.number = function (options) {\n  try {\n    return options?.string === true\n      ? (this.actual !== '' &&  // '' => 0\n          this.not.boolean() && // true | false => 1 | 0\n          this.not.array() &&   // [] => 0\n          this.not.null() &&    // null => 0\n          this.not.nan()) ||    // string number\n          false\n      : typeof this.actual === 'number';\n  } catch {\n    return false;\n  }\n};\n\nexport default is;\n","import is from '../core.mjs';\nimport json5 from 'json5';\n\n/**\n * Checks if `is.prototype.actual` is object,\n * with optional behavior for string object\n *\n * @param {object} [options] - Optional configration object\n * @param {boolean} [options.string] - If true, also considers the string object \"{...}\"\n * as valid object matches\n *\n * @returns {boolean}\n *\n * @example\n * is({a: 1}).object() // true\n * is('{a: 1}').object({string: true}) // true\n * is('{\"a\": \"1\"}').object({string: true}) // true\n *\n * @memberof is\n * @instance\n * @since 1.0.0\n */\nis.prototype.object = function (options) {\n  try {\n    const parsed =\n      options?.string === true && this.string()\n        ? json5.parse(this.actual)\n        : this.actual;\n\n    return is.object(parsed);\n  } catch {\n    return false;\n  }\n};\n\nexport default is;\n","import is from '../core.mjs';\n\n/**\n * Check weather `is.prototype.actual` is type of `expected`,\n * with optional string type matches\n *\n * @param {Specific} expected - The expected type\n * @param {object} [options] - Optional configuration object\n * @param {boolean} [options.string] - If true considers string values that can be\n * converted to `expected` type as valid otherwise checks for `expected` type\n * @returns {boolean}\n *\n * @example\n * is('value').oftype('string') // true\n * is(true).oftype('boolean') // true\n * is('1').oftype('number', {string: true}) // true\n *\n * @memberof is\n * @instance\n * @since 1.0.0\n */\nis.prototype.oftype = function (expected, options) {\n  switch (expected) {\n    case 'string':\n      return this.string();\n    case 'boolean':\n      return options?.string === true\n        ? this.boolean({ string: true })\n        : this.boolean();\n    case 'number':\n      return options?.string === true\n        ? this.number({ string: true })\n        : this.number();\n    case 'array':\n      return options?.string === true\n        ? this.array({ string: true })\n        : this.array();\n    case 'object':\n      return options?.string === true\n        ? this.object({ string: true })\n        : this.object();\n    case 'function':\n      return this.function();\n    case 'symbol':\n      return this.symbol();\n    case 'regexp':\n      return this.regexp();\n    case 'null':\n      return options?.string === true\n        ? this.null({ string: true })\n        : this.null();\n    case 'undefined':\n      return options?.string === true\n        ? this.undefined({ string: true })\n        : this.undefined();\n    default:\n      return false;\n  }\n};\n\nexport default is;\n","import is from '../core.mjs';\n\n/**\n * Checks if `is.prototype.actual` is RegExp\n *\n * @returns {boolean}\n *\n * @example\n * is(/[a-z]/g).regexp() // true\n * is(new RegExp(/0-9/, 'g')).regexp() // true\n *\n * @memberof is\n * @instance\n * @since 1.0.0\n */\nis.prototype.regexp = function () {\n  return this.actual instanceof RegExp;\n};\n\nexport default is;\n","import is from '../core.mjs';\n\n/**\n * Returns either the string representation of `is.prototype.actual` (if expected is omitted)\n * or a boolean value indicating whether the string representations of `is.prototype.actual`\n * and `expected` are equal\n *\n * @overload Get\n * @returns {Representation}\n * @example\n * is('abc').representation() // '[object String]'\n *\n * @overload Compare\n * @param {Representation} expected - Object string representation e.g `\"[object Boolean]\"`\n * @returns {boolean}\n * @example\n * is(null).representation(\"[object Null]\") // true\n * is([12]).representation(\"[object Null]\") // false\n *\n * @memberof is\n * @instance\n * @since 1.0.0\n */\nis.prototype.representation = function (expected) {\n  return is.representation(this.actual, expected);\n};\n\nexport default is;\n","import is from '../core.mjs';\n\n/**\n * Checks if `is.prototype.actual` is string,\n * with optional behavior for empty strings\n *\n * @param {object} [options] - Optional configration object\n * @param {boolean} [options.empty] - Match empty string \"\" , defaults to `true`\n * @returns {boolean}\n *\n * @example\n * is('value').string() // true\n * is('').string({empty: false}) // false\n *\n * @memberof is\n * @instance\n * @since 1.0.0\n */\nis.prototype.string = function (options = { empty: true }) {\n  return options.empty === true\n    ? typeof this.actual === 'string'\n    : (this.actual !== '' && typeof this.actual === 'string') || false;\n};\n\nexport default is;\n","import is from '../core.mjs';\n\n/**\n * Checks if `is.prototype.actual` is symbol\n *\n * @returns {boolean}\n *\n * @example\n * is(Symbol()).symbol() // true\n *\n * @memberof is\n * @instance\n * @since 1.0.0\n */\nis.prototype.symbol = function () {\n  return (\n    typeof this.actual === 'symbol' && this.representation('[object Symbol]')\n  );\n};\n\nexport default is;\n","import is from '../core.mjs';\n\n/**\n * Checks if `is.prototype.actual` is undefined,\n * with optional behavior for string undefined\n *\n * @param {object} [options] - Optional configration object\n * @param {boolean} [options.string] - If true, also considers the string undefined \"undefined\"\n * as valid undefined matches\n * @returns {boolean}\n *\n * @example\n * is().undefined() // true\n * is(undefined).undefined() // true\n * is('undefined').undefined({string: true}) // true\n *\n * @memberof is\n * @instance\n * @since 1.0.0\n */\nis.prototype.undefined = function (options) {\n  const stringUndefined = () =>\n    this.string({ empty: false }) && this.actual === 'undefined';\n\n  return options?.string === true\n    ? typeof this.actual === 'undefined' || stringUndefined()\n    : typeof this.actual === 'undefined';\n};\n\nexport default is;\n"],"names":["is","actual","this","not","func","Object","getOwnPropertyNames","getPrototypeOf","filter","i","object","options","extend","method","prototype","hasOwnProperty","call","array","Array","isArray","representation","expected","toString","type","extract","number","string","boolean","function","symbol","regexp","null","undefined","typeOf","unicode","Space_Separator","ID_Start","ID_Continue","util","isSpaceSeparator","c","test","isIdStartChar","isIdContinueChar","isDigit","isHexDigit","source","parseState","stack","pos","line","column","token","key","root","internalize","holder","name","reviver","value","length","String","replacement","defineProperty","writable","enumerable","configurable","lexState","buffer","doubleQuote","sign","lex","peek","lexStates","fromCodePoint","codePointAt","read","newToken","comment","invalidChar","multiLineComment","multiLineCommentAsterisk","singleLineComment","literal","Infinity","NaN","identifierNameStartEscape","u","unicodeEscape","invalidIdentifier","identifierName","identifierNameEscape","zero","decimalInteger","Number","decimalPointLeading","decimalPoint","decimalFraction","decimalExponent","decimalExponentSign","decimalExponentInteger","hexadecimal","hexadecimalInteger","parseInt","hexEscape","escape","console","warn","formatChar","separatorChar","start","beforePropertyName","afterPropertyName","beforePropertyValue","afterPropertyValue","beforeArrayValue","afterArrayValue","end","s","count","parseStates","invalidEOF","push","pop","parent","current","syntaxError","replacements","hexString","charCodeAt","substring","message","err","SyntaxError","lineNumber","columnNumber","JSON5","parse","text","stringify","replacer","space","propertyList","replacerFunc","quote","indent","gap","v","item","indexOf","Math","min","floor","substr","serializeProperty","toJSON5","toJSON","Boolean","valueOf","quoteString","TypeError","stepback","final","partial","propertyString","join","separator","properties","serializeArray","keys","member","serializeKey","serializeObject","quotes","product","quoteChar","reduce","a","b","replace","RegExp","firstChar","lib","parsed","json5","range","some","in","mode","includes","nan","strict","isNaN","native","empty","oftype","stringUndefined"],"mappings":"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","x_google_ignoreList":[6]}